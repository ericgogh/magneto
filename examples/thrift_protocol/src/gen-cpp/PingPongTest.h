/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PingPongTest_H
#define PingPongTest_H

#include <thrift/TDispatchProcessor.h>
#include "sample_proto_types.h"

namespace app {

class PingPongTestIf {
 public:
  virtual ~PingPongTestIf() {}
  virtual void PingPong(Pong& _return, const Ping& ping) = 0;
};

class PingPongTestIfFactory {
 public:
  typedef PingPongTestIf Handler;

  virtual ~PingPongTestIfFactory() {}

  virtual PingPongTestIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PingPongTestIf* /* handler */) = 0;
};

class PingPongTestIfSingletonFactory : virtual public PingPongTestIfFactory {
 public:
  PingPongTestIfSingletonFactory(const boost::shared_ptr<PingPongTestIf>& iface) : iface_(iface) {}
  virtual ~PingPongTestIfSingletonFactory() {}

  virtual PingPongTestIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PingPongTestIf* /* handler */) {}

 protected:
  boost::shared_ptr<PingPongTestIf> iface_;
};

class PingPongTestNull : virtual public PingPongTestIf {
 public:
  virtual ~PingPongTestNull() {}
  void PingPong(Pong& /* _return */, const Ping& /* ping */) {
    return;
  }
};

typedef struct _PingPongTest_PingPong_args__isset {
  _PingPongTest_PingPong_args__isset() : ping(false) {}
  bool ping;
} _PingPongTest_PingPong_args__isset;

class PingPongTest_PingPong_args {
 public:

  PingPongTest_PingPong_args() {
  }

  virtual ~PingPongTest_PingPong_args() throw() {}

  Ping ping;

  _PingPongTest_PingPong_args__isset __isset;

  void __set_ping(const Ping& val) {
    ping = val;
  }

  bool operator == (const PingPongTest_PingPong_args & rhs) const
  {
    if (!(ping == rhs.ping))
      return false;
    return true;
  }
  bool operator != (const PingPongTest_PingPong_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PingPongTest_PingPong_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PingPongTest_PingPong_pargs {
 public:


  virtual ~PingPongTest_PingPong_pargs() throw() {}

  const Ping* ping;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PingPongTest_PingPong_result__isset {
  _PingPongTest_PingPong_result__isset() : success(false) {}
  bool success;
} _PingPongTest_PingPong_result__isset;

class PingPongTest_PingPong_result {
 public:

  PingPongTest_PingPong_result() {
  }

  virtual ~PingPongTest_PingPong_result() throw() {}

  Pong success;

  _PingPongTest_PingPong_result__isset __isset;

  void __set_success(const Pong& val) {
    success = val;
  }

  bool operator == (const PingPongTest_PingPong_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PingPongTest_PingPong_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PingPongTest_PingPong_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PingPongTest_PingPong_presult__isset {
  _PingPongTest_PingPong_presult__isset() : success(false) {}
  bool success;
} _PingPongTest_PingPong_presult__isset;

class PingPongTest_PingPong_presult {
 public:


  virtual ~PingPongTest_PingPong_presult() throw() {}

  Pong* success;

  _PingPongTest_PingPong_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PingPongTestClient : virtual public PingPongTestIf {
 public:
  PingPongTestClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  PingPongTestClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void PingPong(Pong& _return, const Ping& ping);
  void send_PingPong(const Ping& ping);
  void recv_PingPong(Pong& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PingPongTestProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PingPongTestIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PingPongTestProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_PingPong(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PingPongTestProcessor(boost::shared_ptr<PingPongTestIf> iface) :
    iface_(iface) {
    processMap_["PingPong"] = &PingPongTestProcessor::process_PingPong;
  }

  virtual ~PingPongTestProcessor() {}
};

class PingPongTestProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PingPongTestProcessorFactory(const ::boost::shared_ptr< PingPongTestIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PingPongTestIfFactory > handlerFactory_;
};

class PingPongTestMultiface : virtual public PingPongTestIf {
 public:
  PingPongTestMultiface(std::vector<boost::shared_ptr<PingPongTestIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PingPongTestMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PingPongTestIf> > ifaces_;
  PingPongTestMultiface() {}
  void add(boost::shared_ptr<PingPongTestIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void PingPong(Pong& _return, const Ping& ping) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PingPong(_return, ping);
    }
    ifaces_[i]->PingPong(_return, ping);
    return;
  }

};

} // namespace

#endif
